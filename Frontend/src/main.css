/* Useful links: */
/* Convert hex to CSS filter:  https://codepen.io/sosuke/pen/Pjoqqp  */
/* Color-contrast analyzer: https: //color.adobe.com/create/color-contrast-analyzer  */

/* This is the main css file used in the project. Should be imported after a css reset file */

/* @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Inter+Tight:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap'); */

/* Fonts */
/* Support: Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
/* If you also want to include support for older browsers refer to: https: //gwfh.mranftl.com/fonts/inter?subsets=latin*/

/* Font: Inter (base font) */
@font-face {
    font-display: swap;
    font-family: 'Inter';
    font-style: normal;
    font-weight: 400;
    src: url('./assets/fonts/inter-v13-latin-regular.woff2') format('woff2');
}

@font-face {
    font-display: swap;
    font-family: 'Inter';
    font-style: normal;
    font-weight: 600;
    src: url('./assets/fonts/inter-v13-latin-600.woff2') format('woff2');
}

/* Font: Inter Tight used for italics only: use html i tag in component */
@font-face {
    font-display: swap;
    font-family: 'Inter Tight';
    font-style: italic;
    font-weight: 300;
    src: url('./assets/fonts/inter-tight-v7-latin-300italic.woff2') format('woff2');
}

@font-face {
    font-display: swap;
    font-family: 'Inter Tight';
    font-style: italic;
    font-weight: 400;
    src: url('./assets/fonts/inter-tight-v7-latin-italic.woff2') format('woff2');
}

@font-face {
    font-display: swap;
    font-family: 'Inter Tight';
    font-style: italic;
    font-weight: 600;
    src: url('./assets/fonts/inter-tight-v7-latin-600italic.woff2') format('woff2');
}

:root {
    --BackgroudPrimary: #0d1618;
    --BackgroudSecondary: #111c1e;
    --BackgroudTertiary: #152325;
    --BackgroundDisabled: #384d4f;
    --BackgroundInput: #162427;
    --FontColorInput: #F0F0F0;
    --FontColorPrimary: #EBEBEB;
    --FontColorSecondary: #B3B3B3;
    --FontColorDarker: #3d515c;
    --FontColorDarkerFilter: invert(24%) sepia(40%) saturate(326%) hue-rotate(157deg) brightness(102%) contrast(85%);
    --FontColorDark: #0d1618;
    --BlueColour: #4B83E3;
    --Greycolour: #e4e7ed;
    --DarkerGreyColour: #bcbfc7;
    --DarkGreyColour: #999ca4;
    --MiddleBlueColour: #376073;
    --YellowColor: #DB9A02;
    --RedColor: #aa0000;

    font-family: 'Inter Tight', sans-serif;
    font-family: 'Inter', sans-serif;
    background-color: var(--BackgroudPrimary);
    color: var(--FontColorPrimary);
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

body {
    margin: 0;
    display: flex;
    min-width: 320px;
    min-height: 100vh;
    line-height: 1.4;
}

body.light-mode {
    background-color: var(--Greycolour);
    color: var(--BackgroudPrimary)
}

#root {
    flex: 1 0 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

#root>* {
    padding: 5px 20px;
}

#root>div {
    flex-grow: 1;
}

h2 {
    font-size: 1.7em;
    margin: 10px 0;
}

h3 {
    font-size: 1.4em;
    margin: 10px 0;
}

h4 {
    font-size: 1.4em;
    font-weight: bold;
    margin: 10px 0;
    color: var(--FontColorSecondary);
}

.light-mode h2,
.light-mode h3,
.light-mode h4 {
    color: var(--FontColorDarker);
}

p,
label,
button,
select,
input,
textarea {
    font-family: 'Inter', sans-serif;
    font-size: 1em;
}

.light-mode p {
    color: var(--FontColorDark);
}

a {
    color: var(--BlueColour)
}

i {
    font-family: 'Inter Tight', sans-serif;
    font-style: italic;
}

b {
    font-weight: bold;
}

button {
    font-weight: 600;
    padding: 7px 25px;
    background-color: var(--BlueColour);
    border: none;
    border-radius: 7px;
    box-shadow: #13202389 0px 7px 29px 0px;
    color: var(--FontColorDark);
    cursor: pointer;
}

@media (hover: hover) {
    button:hover {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;
    }
}

button:disabled {
    background-color: var(--BackgroundDisabled);
    border: 2px solid var(--BackgroudSecondary);
    color: var(--BackgroudPrimary);
    box-shadow: none;
}

input,
select,
textarea {
    border: none;
    border-radius: 7px;
    padding: 5px 10px;
    background-color: var(--BackgroundInput);
    color: var(--FontColorInput);
}

.light-mode input,
.light-mode select,
.light-mode textarea {
    background-color: var(--DarkerGreyColour);
    color: var(--FontColorDark);
}



/* **********************************************************
*                                                           *
*                   SHARED CLASSES                          *
*                                                           *
*   Classes that can be used in any component for styling   *
*                                                           *
********************************************************** */

.MAIN-display-none {
    display: none;
}

.MAIN-DeleteBtn {
    background-color: var(--RedColor);
    color: var(--FontColorPrimary);
}

/* P-tag classes 
    - MAIN-error-message: used in p-tag. Messages have been wrapped in i-tags as well. ==> DELETE after all components use the error component
    - MAIN-information-text: used in p-tags. Text is darker as meant to be used as a 'ps' at bottom os page. =>Consider deletion
    => Usage example: SignUp component
*/
.MAIN-error-message {
    font-size: 0.9em;
    color: var(--YellowColor);
}

.MAIN-info-paragraph {
    color: var(--FontColorSecondary);
    margin: 15px 0;
}

.MAIN-yellow-paragraph {
    color: var(--YellowColor) !important;
}

/* Form-tag classes
    - MAIN-form: used in form-tags. For it to work, the form parent must have the following attributes: {
        display: flex; flex-direction: column;}, and form elements such as label and tags must be wrapped in a div with MAIN-form-display-table class. Error messages do not have to be placed in divs, and can be p tags bellow the div.
        Also recommended: "form parent">h2 {margin-bottom: 25px;} to style the component's page title
    - MAIN-form-display-table: using in divs which contain label&input tag pairs and are children of 
        .MAIN-form
    => Usage example: SignUp component
*/

.MAIN-form {
    align-self: start;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;

}

.MAIN-form>* {
    margin-bottom: 15px;
    align-self: start;
}

.MAIN-form>button {
    margin-top: 15px;
    margin-bottom: 15px;
}

.MAIN-form-star {
    /* Used on the star denoting a required field, example: ==>DELETE after all components use the star component
    <span className="MAIN-form-star">*</span>
     */

    color: var(--FontColorDarker);
}

.MAIN-form-display-table {
    display: grid;
    /* grid-template-columns => adapt in component's own css as needed */
    grid-template-columns: 2fr 3fr;
    grid-gap: 10px;
}

.MAIN-form-display-table>input {
    /* Include padding in total width */
    box-sizing: border-box;
    width: 100%;
}

.MAIN-form-display-table>label {
    align-self: center
}



/* @media (min-width: 600px) {
    .MAIN-form-display-table {
        grid-template-columns => adapt in component's own css as needed
        grid-template-columns: 200px 300px;
    }
} */

/* Table-tag classes
    - MAIN-table: used in table-tags. 
    - MAIN-table-label: used in label tags inside td-tags. a lable tag should be placed inside td tags with the column's title in them. This will be used in mobile versions. See example in Admin>UsersTable>UsersTableRow component
    => Usage example: Admin > UsersTable > UsersTable component
    => Don't forget to adjust grid-template-columns in the component's own css to properly size the columns according to the number of table columns. div
*/

.MAIN-table {
    margin-top: 20px !important;
    border-collapse: collapse;
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    border-radius: 5px;
    border-style: hidden;
    box-shadow: 0 0 0 2px var(--FontColorDarker);
}

.MAIN-table>thead>tr>th,
.MAIN-table>tbody>tr>td {
    padding: 5px;
}

.MAIN-table>tbody>tr:nth-of-type(even) {
    background-color: var(--BackgroudSecondary);
}

.light-mode .MAIN-table>tbody>tr:nth-of-type(even) {
    background-color: var(--DarkerGreyColour);
}

@media (hover: hover) {
    .MAIN-table>tbody>tr:hover {
        background-color: var(--BackgroudTertiary);
    }

    .light-mode .MAIN-table>tbody>tr:hover {
        background-color: var(--DarkGreyColour);
    }
}

/* TABLE ON MOBILE/SMALL DEVICES ONLY */

.MAIN-table,
.MAIN-table>thead,
.MAIN-table>tbody,
.MAIN-table>thead>tr,
.MAIN-table>thead>tr>th,
.MAIN-table>tbody>tr>td {
    display: block;
}

/* Hide table headers (but not display: none;, for accessibility) */
.MAIN-table>thead>tr {
    position: absolute;
    top: -9999px;
    left: -9999px;
}

.MAIN-table>tbody {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.MAIN-table>tbody>tr {
    margin: 5px;
    border: 3px solid var(--BackgroudTertiary);
    border-radius: 5px;
}

.MAIN-table>tbody>tr>td {
    /* Make behave  like a "row" */
    border-bottom: 2px solid var(--BackgroudTertiary);
    position: relative;
    display: grid;
    /* grid-template-columns => adapt in component's own css as needed */
    grid-template-columns: 6em auto
}

.MAIN-table-label {
    font-weight: bold;
    padding-right: 5px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    color: var(--FontColorSecondary);
}

/* TABLE ON BIG SCREENS */
@media only screen and (min-width:600px) {

    .MAIN-table,
    .MAIN-table>thead,
    .MAIN-table>tbody,
    .MAIN-table>thead>tr,
    .MAIN-table>thead>tr>th,
    .MAIN-table>tbody>tr,
    .MAIN-table>tbody>tr>td {
        margin: 0;
        padding: 0;
        border: none;
        display: revert;
        position: revert;
    }

    .MAIN-table,
    .MAIN-table>thead,
    .MAIN-table>tbody {
        display: flex;
        flex-direction: column;
        gap: 0;
    }

    .MAIN-table>thead>tr,
    .MAIN-table>tbody>tr {
        padding: 5px;
        display: grid;
        /* grid-template-columns => adapt in component's own css as needed */
        grid-template-columns: auto repeat(4, 10em);
        justify-items: stretch;
        align-items: center;
        gap: 0 5px;
        border-bottom: 2px solid var(--FontColorDarker);
        border-radius: 0;
    }

    .MAIN-table>thead>tr {
        background-color: var(--BackgroundInput);
    }

    .light-mode .MAIN-table>thead>tr {
        background-color: var(--DarkGreyColour);
    }

    .MAIN-table>thead>tr>th {
        text-align: start;
        font-weight: bold;
    }

    .MAIN-table-label {
        display: none;
    }
}

/* HONEYPOT FIELDS */
.MAIN-NO-HUN {
    position: absolute;
    left: -9999px;
    width: 1px;
    height: 1px;
    overflow: hidden;
    opacity: 0;
    z-index: -1;
}

/* ICON DISPLAY */
/* Classes for icon containers which should display the icon in the middle of a circle
    Example: admin users table icons with flag, blocked status and user type
 */
.MAIN-iconContainerCircle {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 1px solid black;
    background-color: var(--FontColorSecondary);
    display: flex;
    align-items: center;
    justify-content: center;
}

.MAIN-iconContainerCircle>img {
    height: 15px;
}

/* MAIN-iconUserBlocked is a class to be used on the img icon_user_status_blocked.svg when it is a child of MAIN-iconContainerCircle*/
.MAIN-iconContainerCircle>.MAIN-iconUserBlocked {
    margin-left: -1px;
    height: 17px !important;
}

/* MAIN-iconUserType is a class to be used on the img icon_user_type_admin.svg and icon_user_type_user.svg when it is a child of MAIN-iconContainerCircle*/
.MAIN-iconContainerCircle>.MAIN-iconUserType {
    margin-left: 10%;
    margin-top: -10%;
    height: 19px !important;
}